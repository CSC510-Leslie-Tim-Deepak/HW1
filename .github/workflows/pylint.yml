name: Pylint

on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: "Setup installation requirements"
        run: |
          pip install --upgrade pip
          pip install pylint

          # enter the critical section    
      - name: Retry Lock File Creation
        run: |
          MAX_RETRIES=10
          RETRY_INTERVAL=3
          LOCK_FILE=".github/lockfile"
          for i in $(seq 1 $MAX_RETRIES); do
            if [ -f "$LOCK_FILE" ]; then
              echo "Another workflow is running. Retry $i/$MAX_RETRIES."
              sleep $RETRY_INTERVAL
            else
              echo "Creating lock file."
              touch "$LOCK_FILE"
              exit 0
            fi
          done
          echo "Failed to create lock file after $MAX_RETRIES retries."
          exit 1
          
      - name: Run Pylint & Update Dynamic Badge
        uses: Silleellie/pylint-github-action@v2
        with:
          lint-path: |
            ./hw2_rsc/*.py
          python-version: 3.11
        continue-on-error: true
      
      - name: "Lint package(s)"
        run: |
          mkdir -p post_traces
          pylint --exit-zero ./hw2_rsc/*.py | tee ./post_traces/pylint_trace.txt
        
      - name: Commit files # commit the output folder
        run: |
          git config --local user.email "test@github.com"
          git config --local user.name "GitHub Action test"
          git pull
          git add ./post_traces/pylint_trace.txt
          git commit --allow-empty -m "Update pylint report"
          git push
        continue-on-error: true
          
      # leave the critical section    
      - name: Remove Lock File
        run: |
          LOCK_FILE=".github/lockfile"
          if [ -f "$LOCK_FILE" ]; then
            echo "Removing lock file."
            rm "$LOCK_FILE"
          fi
