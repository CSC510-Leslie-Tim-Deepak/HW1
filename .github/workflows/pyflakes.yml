name: Pyflakes

on: [push, pull_request]

jobs:
  pyflakes:
    runs-on: ubuntu-latest

    steps:        
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'  # Specify the Python version you use

      - name: Install Pyflakes
        run: |
          python -m pip install --upgrade pip
          pip install pyflakes

        # enter the critical section    
      - name: Retry Lock File Creation
        run: |
          MAX_RETRIES=10
          RETRY_INTERVAL=3
          LOCK_FILE=".github/lockfile"
          for i in $(seq 1 $MAX_RETRIES); do
            if [ -f "$LOCK_FILE" ]; then
              echo "Another workflow is running. Retry $i/$MAX_RETRIES."
              sleep $RETRY_INTERVAL
            else
              echo "Creating lock file."
              touch "$LOCK_FILE"
              exit 0
            fi
          done
          echo "Failed to create lock file after $MAX_RETRIES retries."
          exit 1
        continue-on-error: true
        
      - name: Run Pyflakes
        id: pyflakes
        run: |
          mkdir -p post_traces
          pyflakes ./hw2_rsc/*.py | tee ./post_traces/pyflakes_trace.txt
          if [ -s ./post_traces/pyflakes_trace.txt ]; then
            echo "status=fail" >> $GITHUB_ENV
          else
            echo "status=pass" >> $GITHUB_ENV
          fi
        continue-on-error: true
        
      - name: Commit files # commit the output folder
        run: |
          git config --local user.email "test@github.com"
          git config --local user.name "GitHub Action test"
          git pull
          git add ./post_traces/pyflakes_trace.txt
          git commit --allow-empty -m "Update pyflakes report"
          git push
          
      # leave the critical section    
      - name: Remove Lock File
        run: |
          LOCK_FILE=".github/lockfile"
          if [ -f "$LOCK_FILE" ]; then
            echo "Removing lock file."
            rm "$LOCK_FILE"
          fi
        
      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
            auth: ${{ secrets.GIST_SECRET }}
            gistID: e08fb0f4d4d2ebffe6c63b3be6f0b21d
            filename: test.json # Use test.svg if you want to use the SVG mode.
            label: Pyflakes
            message: ${{ env.status == 'pass' && 'Pass' || 'Fail' }}
            color: ${{ env.status == 'pass' && 'brightgreen' || 'red' }}
            namedLogo: snowflake
            logoColor: "#ffffff"
